name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_PASSWORD: postgres
  POSTGRES_USER: postgres
  POSTGRES_DB: painaidee_test_db

jobs:
  setup-and-test:
    name: Setup and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black pytest-cov alembic

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check --diff .

    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Set up database
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
      run: |
        # Initialize database schema using api.models
        python -c "
        import os
        import sys
        sys.path.append('.')
        os.environ['DATABASE_URL'] = '$DATABASE_URL'
        from api.models import Base, engine
        try:
            Base.metadata.create_all(bind=engine)
            print('‚úÖ Database tables created successfully')
        except Exception as e:
            print(f'‚ùå Error creating tables: {e}')
            sys.exit(1)
        "

    - name: Run tests
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
      run: |
        pytest tests/ -v --cov=api --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      if: always()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  database-migration:
    name: Database Migration Check
    runs-on: ubuntu-latest
    needs: setup-and-test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install alembic

    - name: Check if migrations directory exists
      id: check_migrations
      run: |
        if [ -d "migrations/versions" ] && [ "$(ls -A migrations/versions)" ]; then
          echo "migrations_exist=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Migration versions found"
        else
          echo "migrations_exist=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è  No migration versions found"
        fi

    - name: Run database migrations (if migrations exist)
      if: steps.check_migrations.outputs.migrations_exist == 'true'
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
      run: |
        echo "üîÑ Running database migrations..."
        alembic upgrade head
        echo "‚úÖ Database migrations completed"

    - name: Initialize database without migrations (if no migrations exist)
      if: steps.check_migrations.outputs.migrations_exist == 'false'
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
      run: |
        echo "üîÑ Creating tables directly from models..."
        python -c "
        import os
        import sys
        sys.path.append('.')
        os.environ['DATABASE_URL'] = '$DATABASE_URL'
        from api.models import Base, engine
        try:
            Base.metadata.create_all(bind=engine)
            print('‚úÖ Database tables created successfully')
        except Exception as e:
            print(f'‚ùå Error creating tables: {e}')
            sys.exit(1)
        "

    - name: Test data population script
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
      run: |
        # Test the data population script syntax and imports
        python -c "
        import sys
        import os
        sys.path.append('.')
        os.environ['DATABASE_URL'] = '$DATABASE_URL'
        print('üîç Testing db_script.py syntax and imports...')
        try:
            import db_script
            print('‚úÖ db_script.py is syntactically valid')
            # Test that main function exists
            if hasattr(db_script, 'main'):
                print('‚úÖ main() function found')
            else:
                print('‚ö†Ô∏è  main() function not found')
            # Test database connection without running full script
            if hasattr(db_script, 'check_database_connection'):
                if db_script.check_database_connection():
                    print('‚úÖ Database connection test passed')
                else:
                    print('‚ö†Ô∏è  Database connection test failed')
        except ImportError as e:
            print(f'‚ùå Import error: {e}')
            sys.exit(1)
        except Exception as e:
            print(f'‚ùå Error in db_script.py: {e}')
            sys.exit(1)
        "

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [setup-and-test, database-migration]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "This is where you would deploy to your staging server"
        echo "Example commands:"
        echo "- Build Docker image"
        echo "- Push to container registry"
        echo "- Deploy to staging server"
        echo "- Run database migrations"
        echo "- Health check"

    - name: Staging deployment notification
      run: |
        echo "‚úÖ Staging deployment completed successfully"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [setup-and-test, database-migration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "This is where you would deploy to your production server"
        echo "Example commands:"
        echo "- Build Docker image with production tag"
        echo "- Push to container registry"
        echo "- Deploy to production server with zero-downtime"
        echo "- Run database migrations safely"
        echo "- Health check and rollback capability"

    - name: Production deployment notification
      run: |
        echo "‚úÖ Production deployment completed successfully"

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [setup-and-test, database-migration, deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify on success
      if: needs.setup-and-test.result == 'success'
      run: |
        echo "‚úÖ CI/CD Pipeline completed successfully!"
        echo "üìä Test results: PASSED"
        echo "üóÑÔ∏è  Database checks: PASSED"
        echo "This is where you would send success notifications to:"
        echo "- Slack/Teams channels"
        echo "- Email notifications"
        echo "- Discord webhooks"
        echo "- Status dashboards"

    - name: Notify on failure
      if: needs.setup-and-test.result == 'failure' || needs.database-migration.result == 'failure'
      run: |
        echo "‚ùå CI/CD Pipeline failed!"
        echo "Please check the logs for details"
        echo "This is where you would send failure notifications to:"
        echo "- Slack/Teams channels with error details"
        echo "- Email notifications to dev team"
        echo "- Discord webhooks"
        echo "- Status dashboards"
        exit 1

    - name: Deployment status notification
      if: needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped'
      run: |
        STAGING_STATUS="${{ needs.deploy-staging.result }}"
        PRODUCTION_STATUS="${{ needs.deploy-production.result }}"
        
        echo "üöÄ Deployment Status:"
        if [ "$STAGING_STATUS" != "skipped" ]; then
          echo "üì¶ Staging: $STAGING_STATUS"
        fi
        if [ "$PRODUCTION_STATUS" != "skipped" ]; then
          echo "üåü Production: $PRODUCTION_STATUS"
        fi