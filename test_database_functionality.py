#!/usr/bin/env python3
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PaiNaiDee
‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏≠‡πà‡∏≤‡∏ô ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
"""

import os
import sys

# Add the current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from api.models import Base, User, Category, Tag, Attraction, Review, Favorite, AttractionTag
from api.deps import engine, SessionLocal
import random
from datetime import datetime, timedelta

def create_test_database():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
    try:
        Base.metadata.create_all(bind=engine)
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á: {e}")
        return False

def clear_test_data():
    """‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    session = SessionLocal()
    try:
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å foreign key constraints)
        session.query(AttractionTag).delete()
        session.query(Favorite).delete()
        session.query(Review).delete()
        session.query(Attraction).delete()
        session.query(Category).delete()
        session.query(Tag).delete()
        session.query(User).delete()
        session.commit()
        print("‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    except Exception as e:
        session.rollback()
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
    finally:
        session.close()

def create_sample_data():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
    session = SessionLocal()
    try:
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Categories
        categories = [
            Category(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß", description="‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"),
            Category(name="‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£", description="‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°"),
            Category(name="‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å", description="‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å"),
            Category(name="‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥", description="‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥"),
        ]
        
        for category in categories:
            session.add(category)
        session.flush()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Tags
        tags = [
            Tag(name="‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°"),
            Tag(name="‡∏™‡∏á‡∏ö"),
            Tag(name="‡∏≠‡∏£‡πà‡∏≠‡∏¢"),
            Tag(name="‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå"),
            Tag(name="‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß"),
            Tag(name="‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏™‡∏ß‡∏¢"),
        ]
        
        for tag in tags:
            session.add(tag)
        session.flush()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Users
        users = [
            User(username="admin", email="admin@painaidee.com", password_hash="hashed_admin_pass", role="admin"),
            User(username="user1", email="user1@example.com", password_hash="hashed_user1_pass", role="user"),
            User(username="user2", email="user2@example.com", password_hash="hashed_user2_pass", role="user"),
        ]
        
        for user in users:
            session.add(user)
        session.flush()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Attractions
        attractions = [
            Attraction(
                name="‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß",
                description="‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø",
                address="‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
                province="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
                district="‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£",
                latitude=13.7516,
                longitude=100.4921,
                category_id=categories[0].category_id,
                opening_hours="08:30-16:30",
                entrance_fee="500 ‡∏ö‡∏≤‡∏ó",
                website="https://www.watphrakaew.com"
            ),
            Attraction(
                name="‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£",
                description="‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢",
                address="‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
                province="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
                district="‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£",
                latitude=13.7998,
                longitude=100.5493,
                category_id=categories[0].category_id,
                opening_hours="06:00-18:00",
                entrance_fee="‡∏ü‡∏£‡∏µ",
                website="https://www.chatuchakmarket.org"
            ),
            Attraction(
                name="‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÅ‡∏Å‡∏á‡∏î‡∏±‡∏á",
                description="‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡πÅ‡∏ó‡πâ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏î‡∏µ",
                address="‡∏™‡∏µ‡∏•‡∏° ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
                province="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
                district="‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å",
                latitude=13.7250,
                longitude=100.5364,
                category_id=categories[1].category_id,
                opening_hours="10:00-22:00",
                entrance_fee="‡πÑ‡∏°‡πà‡∏°‡∏µ",
                contact_phone="02-123-4567"
            ),
        ]
        
        for attraction in attractions:
            session.add(attraction)
        session.flush()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Reviews
        reviews = [
            Review(
                attraction_id=attractions[0].id,
                user_id=users[1].user_id,
                rating=5,
                comment="‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏°‡∏≤‡∏Å ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏≤‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß",
                created_at=datetime.now() - timedelta(days=5)
            ),
            Review(
                attraction_id=attractions[1].id,
                user_id=users[2].user_id,
                rating=4,
                comment="‡∏Ç‡∏≠‡∏á‡πÄ‡∏¢‡∏≠‡∏∞ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡∏î‡πâ‡∏ß‡∏¢",
                created_at=datetime.now() - timedelta(days=3)
            ),
            Review(
                attraction_id=attractions[2].id,
                user_id=users[1].user_id,
                rating=5,
                comment="‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏£‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ",
                created_at=datetime.now() - timedelta(days=1)
            ),
        ]
        
        for review in reviews:
            session.add(review)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Favorites
        favorites = [
            Favorite(user_id=users[1].user_id, attraction_id=attractions[0].id),
            Favorite(user_id=users[1].user_id, attraction_id=attractions[2].id),
            Favorite(user_id=users[2].user_id, attraction_id=attractions[1].id),
        ]
        
        for favorite in favorites:
            session.add(favorite)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á AttractionTags
        attraction_tags = [
            AttractionTag(attraction_id=attractions[0].id, tag_id=tags[0].tag_id),  # ‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß - ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
            AttractionTag(attraction_id=attractions[0].id, tag_id=tags[3].tag_id),  # ‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß - ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
            AttractionTag(attraction_id=attractions[1].id, tag_id=tags[4].tag_id),  # ‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ - ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß
            AttractionTag(attraction_id=attractions[2].id, tag_id=tags[2].tag_id),  # ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ - ‡∏≠‡∏£‡πà‡∏≠‡∏¢
        ]
        
        for attraction_tag in attraction_tags:
            session.add(attraction_tag)
        
        session.commit()
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        print(f"üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        print(f"   - ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {len(categories)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"   - ‡πÅ‡∏ó‡πá‡∏Å: {len(tags)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£") 
        print(f"   - ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {len(users)} ‡∏Ñ‡∏ô")
        print(f"   - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {len(attractions)} ‡πÅ‡∏´‡πà‡∏á")
        print(f"   - ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß: {len(reviews)} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
        print(f"   - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î: {len(favorites)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        return True
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return False
    finally:
        session.close()

def test_database_queries():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    session = SessionLocal()
    try:
        print("\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        attractions = session.query(Attraction).all()
        print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß: {len(attractions)} ‡πÅ‡∏´‡πà‡∏á")
        
        for attraction in attractions:
            print(f"   - {attraction.name} ({attraction.province})")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
        reviews = session.query(Review).join(User).join(Attraction).all()
        print(f"\n‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á: {len(reviews)} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
        
        for review in reviews:
            print(f"   - {review.user.username} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß '{review.attraction.name}': {review.rating}‚≠ê - {review.comment}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        category = session.query(Category).filter_by(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß").first()
        if category:
            attractions_in_category = session.query(Attraction).filter_by(category_id=category.category_id).all()
            print(f"\n‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î '{category.name}': {len(attractions_in_category)} ‡πÅ‡∏´‡πà‡∏á")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö query: {e}")
        return False
    finally:
        session.close()

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PaiNaiDee\n")
    
    # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    if not create_test_database():
        return
    
    # 2. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    clear_test_data()
    
    # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    if not create_sample_data():
        return
    
    # 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ query
    if not test_database_queries():
        return
    
    print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥!")
    print("\nüí° ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:")
    print("   1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô API server: uvicorn api.main:app --reload")
    print("   2. ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏π API documentation: http://localhost:8000/docs")
    print("   3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö endpoints: http://localhost:8000/attractions")

if __name__ == "__main__":
    main()